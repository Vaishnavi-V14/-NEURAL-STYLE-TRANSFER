from PIL import Image, ImageFilter
import numpy as np
import matplotlib.pyplot as plt
import os

def load_image(image_path, size=None):
    """
    Load an image from a file and resize it.
    
    Args:
        image_path (str): Path to the image file.
        size (tuple, optional): Desired size as (width, height).
        
    Returns:
        Image: Loaded and resized image.
    """
    if not os.path.exists(image_path):
        raise FileNotFoundError(f"Image not found at {image_path}")
    
    img = Image.open(image_path).convert("RGB")
    if size:
        img = img.resize(size, Image.Resampling.LANCZOS)  # Use LANCZOS for high-quality resizing
    return img

def apply_style(content_image, style_image, alpha=0.5):
    """
    Blend content and style images using a weighted average.
    
    Args:
        content_image (Image): Content image.
        style_image (Image): Style image.
        alpha (float): Weight for the style image (0 to 1).
        
    Returns:
        Image: Blended image.
    """
    content_array = np.array(content_image, dtype=np.float32)
    style_array = np.array(style_image, dtype=np.float32)
    
    # Resize style image to match content image dimensions if necessary
    if content_array.shape != style_array.shape:
        style_image = style_image.resize(content_image.size, Image.Resampling.LANCZOS)
        style_array = np.array(style_image, dtype=np.float32)
    
    blended_array = (1 - alpha) * content_array + alpha * style_array
    blended_array = np.clip(blended_array, 0, 255).astype(np.uint8)
    blended_image = Image.fromarray(blended_array)
    return blended_image

def display_images(content_img, style_img, blended_img):
    """
    Display content, style, and blended images side by side.
    
    Args:
        content_img (Image): Content image.
        style_img (Image): Style image.
        blended_img (Image): Blended image.
    """
    fig, axes = plt.subplots(1, 3, figsize=(15, 5))
    axes[0].imshow(content_img)
    axes[0].set_title("Content Image")
    axes[0].axis("off")
    
    axes[1].imshow(style_img)
    axes[1].set_title("Style Image")
    axes[1].axis("off")
    
    axes[2].imshow(blended_img)
    axes[2].set_title("Blended Image")
    axes[2].axis("off")
    plt.show()

if __name__ == "__main__":
    # Update the paths to your images
    content_image_path = r"C:\Users\Vaishnavi\Downloads\portrait image.jpg"
    style_image_path = r"C:\Users\Vaishnavi\Downloads\abstract pattern.webp"
    
    # Load images
    content_image = load_image(content_image_path, size=(400, 400))
    style_image = load_image(style_image_path, size=(400, 400))
    
    # Apply style blending
    blended_image = apply_style(content_image, style_image, alpha=0.6)
    
    # Display the images
    display_images(content_image, style_image, blended_image)
